/*!
 * @pluginjs/animate-text v0.8.3 (https://pluginjs.com)
 * Copyright 2020 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@pluginjs/component'), require('@pluginjs/classes'), require('@pluginjs/dom'), require('@pluginjs/events'), require('@pluginjs/is'), require('@pluginjs/decorator'), require('animejs'), require('@pluginjs/styled')) :
  typeof define === 'function' && define.amd ? define(['@pluginjs/component', '@pluginjs/classes', '@pluginjs/dom', '@pluginjs/events', '@pluginjs/is', '@pluginjs/decorator', 'animejs', '@pluginjs/styled'], factory) :
  (global = global || self, global['@pluginjs/animate-text'] = factory(global['@pluginjs/component'], global['@pluginjs/classes'], global['@pluginjs/dom'], global['@pluginjs/events'], global['@pluginjs/is'], global['@pluginjs/decorator'], global.anime, global['@pluginjs/styled']));
}(this, (function (Component, classes$1, dom, events$1, is, decorator, anime, styled) { 'use strict';

  Component = Component && Component.hasOwnProperty('default') ? Component['default'] : Component;
  anime = anime && anime.hasOwnProperty('default') ? anime['default'] : anime;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var namespace = 'animateText';
  var events = {
    READY: 'ready',
    ENABLE: 'enable',
    DISABLE: 'disable',
    DESTROY: 'destroy'
  };
  var classes = {
    NAMESPACE: "pj-".concat(namespace),
    SWITCH: '{namespace}-switch',
    WORD: '{namespace}-word',
    CHAR: '{namespace}-char',
    SPACE: '{namespace}-space',
    CURSOR: '{namespace}-cursor'
  };
  var methods = ['enable', 'disable', 'destroy'];
  var defaults = {
    mode: 'fadeDown',
    loop: true,
    duration: 1000,
    alt: [] // switch words.  example: ['word1', 'word2']

  };
  var dependencies = ['anime'];

  var Fade =
  /*#__PURE__*/
  function () {
    function Fade(instance) {
      _classCallCheck(this, Fade);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
      this.setupAnime();
    }

    _createClass(Fade, [{
      key: "initialize",
      value: function initialize() {
        this.text = dom.text(this.element);
        dom.text('', this.element);
        this.instance.splitWord(this.text);
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.element,
            loop: true,
            duration: this.options.duration,
            easing: 'linear'
          }).add({
            opacity: [0, 1],
            endDelay: 700
          }).add({
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.element,
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            easing: 'linear'
          });
        }
      }
    }]);

    return Fade;
  }();

  var FadeDown =
  /*#__PURE__*/
  function (_Fade) {
    _inherits(FadeDown, _Fade);

    function FadeDown() {
      _classCallCheck(this, FadeDown);

      return _possibleConstructorReturn(this, _getPrototypeOf(FadeDown).apply(this, arguments));
    }

    _createClass(FadeDown, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.element,
            loop: true,
            duration: this.options.duration,
            easing: 'linear'
          }).add({
            translateY: [-20, 0],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateY: [0, 20],
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.element,
            translateY: [-20, 0],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            easing: 'linear'
          });
        }
      }
    }]);

    return FadeDown;
  }(Fade);

  var FadeUp =
  /*#__PURE__*/
  function (_Fade) {
    _inherits(FadeUp, _Fade);

    function FadeUp() {
      _classCallCheck(this, FadeUp);

      return _possibleConstructorReturn(this, _getPrototypeOf(FadeUp).apply(this, arguments));
    }

    _createClass(FadeUp, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.element,
            loop: true,
            duration: this.options.duration,
            easing: 'linear'
          }).add({
            translateY: [20, 0],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateY: [0, -20],
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.element,
            translateY: [20, 0],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            easing: 'linear'
          });
        }
      }
    }]);

    return FadeUp;
  }(Fade);

  var FadeLeft =
  /*#__PURE__*/
  function (_Fade) {
    _inherits(FadeLeft, _Fade);

    function FadeLeft() {
      _classCallCheck(this, FadeLeft);

      return _possibleConstructorReturn(this, _getPrototypeOf(FadeLeft).apply(this, arguments));
    }

    _createClass(FadeLeft, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.element,
            loop: true,
            duration: this.options.duration,
            easing: 'linear'
          }).add({
            translateX: [20, 0],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateX: [0, -20],
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.element,
            translateX: [20, 0],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            easing: 'linear'
          });
        }
      }
    }]);

    return FadeLeft;
  }(Fade);

  var FadeRight =
  /*#__PURE__*/
  function (_Fade) {
    _inherits(FadeRight, _Fade);

    function FadeRight() {
      _classCallCheck(this, FadeRight);

      return _possibleConstructorReturn(this, _getPrototypeOf(FadeRight).apply(this, arguments));
    }

    _createClass(FadeRight, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.element,
            loop: true,
            duration: this.options.duration,
            easing: 'linear'
          }).add({
            translateX: [-20, 0],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateX: [0, 20],
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.element,
            translateX: [-20, 0],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            easing: 'linear'
          });
        }
      }
    }]);

    return FadeRight;
  }(Fade);

  var Zoom =
  /*#__PURE__*/
  function () {
    function Zoom(instance) {
      _classCallCheck(this, Zoom);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
      this.setupAnime();
    }

    _createClass(Zoom, [{
      key: "initialize",
      value: function initialize() {
        this.text = dom.text(this.element);
        dom.text('', this.element);
        this.instance.splitWord(this.text);
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.element,
            loop: true,
            duration: this.options.duration,
            easing: 'easeInOutQuart'
          }).add({
            scale: [0, 1],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            scale: [1, 1.3],
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.element,
            scale: [0, 1],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            easing: 'easeInOutQuart'
          });
        }
      }
    }]);

    return Zoom;
  }();

  var Bounce =
  /*#__PURE__*/
  function () {
    function Bounce(instance) {
      _classCallCheck(this, Bounce);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
      this.setupAnime();
    }

    _createClass(Bounce, [{
      key: "initialize",
      value: function initialize() {
        this.text = dom.text(this.element);
        dom.text('', this.element);
        this.instance.splitWord(this.text);
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        var options = {
          targets: this.element,
          scale: [0.5, 1.2, 0.8, 1.2, 1],
          endDelay: 700 + this.options.duration
        };
        anime.timeline({
          duration: this.options.duration,
          easing: 'easeInOutSine',
          loop: this.options.loop
        }).add(options);
      }
    }]);

    return Bounce;
  }();

  var Swing =
  /*#__PURE__*/
  function () {
    function Swing(instance) {
      _classCallCheck(this, Swing);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
      this.setupAnime();
    }

    _createClass(Swing, [{
      key: "initialize",
      value: function initialize() {
        this.text = dom.text(this.element);
        dom.text('', this.element);
        this.instance.splitWord(this.text);
        styled.setStyle('transform-origin', 'top center', this.element);
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        var options = {
          targets: this.element,
          rotateZ: [-5, 5, -10, 10, 0],
          endDelay: 700 + this.options.duration
        };
        anime.timeline({
          duration: this.options.duration,
          easing: 'easeInOutSine',
          loop: this.options.loop
        }).add(options);
      }
    }]);

    return Swing;
  }();

  var Typewrite =
  /*#__PURE__*/
  function () {
    function Typewrite(instance) {
      _classCallCheck(this, Typewrite);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
      this.setupAnime();
    }

    _createClass(Typewrite, [{
      key: "initialize",
      value: function initialize() {
        this.text = dom.text(this.element);
        this.build();
        this.textArr = this.text.split('');
        this.chunk = Array(this.textArr.length + 1).fill(1).map(function (v, k) {
          return k;
        });
        this.chunkReverse = this.chunk.slice().reverse();
        this.initTextOptions();
      }
    }, {
      key: "initTextOptions",
      value: function initTextOptions() {
        var _this = this;

        this.alt = is.isArray(this.options.alt) ? this.options.alt : Array.of(this.options.alt);
        this.totalText = Array.of({
          textArr: this.textArr,
          chunk: this.chunk,
          chunkReverse: this.chunkReverse
        });
        this.alt.forEach(function (word) {
          var textArr = word.split('');
          var chunk = Array(textArr.length + 1).fill(1).map(function (v, k) {
            return k;
          });
          var chunkReverse = chunk.slice().reverse();

          _this.totalText.push({
            textArr: textArr,
            chunk: chunk,
            chunkReverse: chunkReverse
          });
        });
      }
    }, {
      key: "build",
      value: function build() {
        dom.text('', this.element);
        this.content = document.createElement('span');
        classes$1.addClass(this.instance.classes.WORD, this.content);
        dom.text(this.text, this.content);
        dom.append(this.content, this.element);
        this.cursor = document.createElement('span');
        classes$1.addClass(this.instance.classes.CURSOR, this.cursor);
        dom.text('|', this.cursor);
        dom.append(this.cursor, this.element);
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        var _this2 = this;

        var count = 0;
        var startTarget = {
          textLen: 0
        };
        var endTarget = {
          textLen: 0
        };
        var startOptions = {
          targets: startTarget,
          textLen: this.totalText[count].chunk.length - 1,
          round: 1,
          duration: this.options.duration,
          easing: 'easeInOutSine',
          update: function update() {
            var content = _this2.totalText[count].textArr.slice(0, _this2.totalText[count].chunk[startTarget.textLen]).join('');

            dom.text("".concat(content), _this2.content);
          },
          complete: function complete() {
            startTarget.textLen = 0;

            if (count === _this2.totalText.length - 1 && !_this2.options.loop) {
              _this2.anime.pause();
            }
          },
          endDelay: 2000
        };
        var endOptions = {
          targets: endTarget,
          textLen: this.totalText[count].chunkReverse.length - 1,
          round: 1,
          duration: this.options.duration / 3,
          easing: 'linear',
          update: function update() {
            var content = _this2.totalText[count].textArr.slice(0, _this2.totalText[count].chunkReverse[endTarget.textLen]).join('');

            dom.text("".concat(content), _this2.content);
          },
          complete: function complete() {
            endTarget.textLen = 0;

            _this2.anime.pause();

            if (_this2.options.loop && count === _this2.totalText.length - 1) {
              count = -1;
            }

            if (count < _this2.totalText.length - 1) {
              count++;
              animeSetup();
            }
          }
        };
        var that = this;

        function animeSetup() {
          startOptions.textLen = that.totalText[count].chunk.length - 1;
          endOptions.textLen = that.totalText[count].chunkReverse.length - 1;
          that.anime = anime.timeline({}).add(startOptions).add(endOptions);
        }

        animeSetup();
      }
    }]);

    return Typewrite;
  }();

  var SyncAnimation =
  /*#__PURE__*/
  function () {
    function SyncAnimation() {
      var _this = this;

      _classCallCheck(this, SyncAnimation);

      if (!window.SyncAnimationGroup) {
        this.animationGroups = [];
        document.addEventListener('visibilitychange', function () {
          if (document.hidden) {
            _this.animationGroups.forEach(function (_ref) {
              var group = _ref.group,
                  onBlur = _ref.onBlur;
              return group.forEach(onBlur);
            });
          } else {
            _this.animationGroups.forEach(function (_ref2) {
              var group = _ref2.group,
                  onFocus = _ref2.onFocus;
              return group.forEach(onFocus);
            });
          }
        }, false);
        window.SyncAnimationGroup = this;
      }

      return window.SyncAnimationGroup;
    }

    _createClass(SyncAnimation, [{
      key: "createAnimationGroup",
      value: function createAnimationGroup(onBlur, onFocus) {
        var animationGroup = {
          group: [],
          onBlur: onBlur,
          onFocus: onFocus
        };
        this.animationGroups.push(animationGroup);
        return {
          push: function push() {
            var _animationGroup$group;

            (_animationGroup$group = animationGroup.group).push.apply(_animationGroup$group, arguments);
          }
        };
      }
    }], [{
      key: "of",
      value: function of() {
        return new SyncAnimation();
      }
    }]);

    return SyncAnimation;
  }();

  var Switch =
  /*#__PURE__*/
  function () {
    function Switch(instance) {
      _classCallCheck(this, Switch);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
    }

    _createClass(Switch, [{
      key: "initialize",
      value: function initialize() {
        var _this = this;

        this.animationGroup = SyncAnimation.of().createAnimationGroup(function (anime) {
          return anime.pause();
        }, function (anime) {
          return anime.play();
        });

        this.joinSyncAnimationGroup = function (anime) {
          return _this.animationGroup.push(anime);
        };

        this.elementHeight = styled.getHeight(this.element);
        this.instance.switchWord();
        this.childrens = Array.from(this.element.children);
        this.widthList = this.getWidthList(this.element);
        this.setPosition();
        styled.setStyle('height', this.elementHeight, this.element);
        this.DOWNTOMID = [this.elementHeight, 0];
        this.MIDTOUP = [0, this.elementHeight * -1];
        this.totalDuration = this.options.duration * this.childrens.length;
      }
    }, {
      key: "getContainerOptions",
      value: function getContainerOptions() {
        return {
          targets: this.element,
          duration: this.totalDuration,
          easing: 'easeOutCirc',
          begin: this.joinSyncAnimationGroup,
          loop: this.options.loop,
          width: this.widthList
        };
      }
    }, {
      key: "getWidthList",
      value: function getWidthList(element) {
        var _this2 = this;

        var widthArr = Array.from(element.children).map(function (node) {
          return node.offsetWidth;
        });
        var widthList = [];
        widthList.push({
          value: widthArr[widthArr.length - 1],
          duration: 0
        });
        widthArr.forEach(function (width) {
          widthList.push({
            value: width,
            duration: _this2.options.duration
          });
        });
        return widthList;
      }
    }, {
      key: "setPosition",
      value: function setPosition() {
        this.childrens.forEach(function (el) {
          styled.setStyle({
            opacity: 0,
            position: 'absolute'
          }, el);
        });
      }
    }]);

    return Switch;
  }();

  var SwitchSlider =
  /*#__PURE__*/
  function (_Switch) {
    _inherits(SwitchSlider, _Switch);

    function SwitchSlider(instance) {
      var _this;

      _classCallCheck(this, SwitchSlider);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwitchSlider).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(SwitchSlider, [{
      key: "getAnimeDefaultOptions",
      value: function getAnimeDefaultOptions(targets) {
        return {
          targets: targets,
          easing: 'easeInSine',
          duration: this.options.duration,
          begin: this.joinSyncAnimationGroup,
          opacity: [{
            value: [0, 1],
            duration: this.options.duration * (1 / 5)
          }, {
            value: 1,
            duration: this.options.duration * (1 / 5)
          }, {
            value: [1, 0],
            duration: this.options.duration * (3 / 5)
          }],
          translateY: [{
            value: this.DOWNTOMID
          }, {
            value: 0
          }, {
            value: this.MIDTOUP
          }]
        };
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        var _this2 = this;

        anime(this.getContainerOptions());

        if (this.options.loop) {
          anime(Object.assign({}, this.getAnimeDefaultOptions(this.childrens), {
            loop: true,
            delay: function delay(el, i) {
              return i * _this2.options.duration;
            }
          }));
        } else {
          var childrens = this.childrens.map(function (el, index) {
            if (index === _this2.childrens.length - 1) {
              return Object.assign(_this2.getAnimeDefaultOptions(el), {
                opacity: [[0, 1], 1],
                translateY: [{
                  value: _this2.DOWNTOMID
                }, {
                  value: 0
                }],
                loop: false
              });
            }

            return Object.assign(_this2.getAnimeDefaultOptions(el), {
              loop: false
            });
          });
          childrens.forEach(function (children, index) {
            setTimeout(function () {
              return anime(children);
            }, index * _this2.options.duration);
          });
        }
      }
    }]);

    return SwitchSlider;
  }(Switch);

  var SwitchFade =
  /*#__PURE__*/
  function (_Switch) {
    _inherits(SwitchFade, _Switch);

    function SwitchFade(instance) {
      var _this;

      _classCallCheck(this, SwitchFade);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwitchFade).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(SwitchFade, [{
      key: "getAnimeDefaultOptions",
      value: function getAnimeDefaultOptions(targets) {
        return {
          targets: targets,
          easing: 'easeInOutQuart',
          duration: this.options.duration,
          begin: this.joinSyncAnimationGroup,
          opacity: [[0, 1], 1, [1, 0]]
        };
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        var _this2 = this;

        anime(this.getContainerOptions());

        if (this.options.loop) {
          anime(Object.assign({}, this.getAnimeDefaultOptions(this.childrens), {
            loop: true,
            delay: function delay(el, i) {
              return i * _this2.options.duration;
            }
          }));
        } else {
          var childrens = this.childrens.map(function (el, index) {
            if (index === _this2.childrens.length - 1) {
              return Object.assign(_this2.getAnimeDefaultOptions(el), {
                opacity: [[0, 1], 1],
                loop: false
              });
            }

            return Object.assign(_this2.getAnimeDefaultOptions(el), {
              loop: false
            });
          });
          childrens.forEach(function (children, index) {
            setTimeout(function () {
              return anime(children);
            }, index * _this2.options.duration);
          });
        }
      }
    }]);

    return SwitchFade;
  }(Switch);

  var SwitchPush =
  /*#__PURE__*/
  function (_Switch) {
    _inherits(SwitchPush, _Switch);

    function SwitchPush(instance) {
      var _this;

      _classCallCheck(this, SwitchPush);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(SwitchPush).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(SwitchPush, [{
      key: "getAnimeDefaultOptions",
      value: function getAnimeDefaultOptions(targets) {
        return {
          targets: targets,
          easing: 'easeInBack',
          duration: this.options.duration,
          begin: this.joinSyncAnimationGroup,
          opacity: [{
            value: [0, 1],
            duration: this.options.duration * (1 / 5)
          }, {
            value: 1,
            duration: this.options.duration * (2 / 5)
          }, {
            value: [1, 0],
            duration: this.options.duration * (2 / 5)
          }],
          translateY: [{
            value: this.DOWNTOMID
          }, {
            value: 0
          }, {
            value: this.MIDTOUP
          }]
        };
      }
    }, {
      key: "setupAnime",
      value: function setupAnime() {
        var _this2 = this;

        anime(this.getContainerOptions());

        if (this.options.loop) {
          anime(Object.assign({}, this.getAnimeDefaultOptions(this.childrens), {
            loop: true,
            delay: function delay(el, i) {
              return i * _this2.options.duration;
            }
          }));
        } else {
          var childrens = this.childrens.map(function (el, index) {
            if (index === _this2.childrens.length - 1) {
              return Object.assign(_this2.getAnimeDefaultOptions(el), {
                opacity: [{
                  value: [0, 1],
                  duration: _this2.options.duration * (1 / 5)
                }, {
                  value: 1,
                  duration: _this2.options.duration * (4 / 5)
                }],
                translateY: [{
                  value: _this2.DOWNTOMID
                }, {
                  value: 0
                }],
                loop: false
              });
            }

            return Object.assign(_this2.getAnimeDefaultOptions(el), {
              loop: false
            });
          });
          childrens.forEach(function (children, index) {
            setTimeout(function () {
              return anime(children);
            }, index * _this2.options.duration);
          });
        }
      }
    }]);

    return SwitchPush;
  }(Switch);

  var Char =
  /*#__PURE__*/
  function () {
    function Char(instance) {
      _classCallCheck(this, Char);

      this.instance = instance;
      this.options = this.instance.options;
      this.element = this.instance.element;
      this.initialize();
    }

    _createClass(Char, [{
      key: "initialize",
      value: function initialize() {
        this.text = dom.text(this.element);
        dom.text('', this.element);
        this.instance.splitWord(this.text, true);
        this.chars = dom.queryAll(".".concat(this.instance.classes.CHAR), this.element);
      }
    }]);

    return Char;
  }();

  var CharFade =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharFade, _Char);

    function CharFade(instance) {
      var _this;

      _classCallCheck(this, CharFade);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharFade).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharFade, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            easing: 'easeInOutQuad',
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            opacity: [0, 1],
            endDelay: 700
          }).add({
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            opacity: [0, 1],
            easing: 'easeInOutQuad',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharFade;
  }(Char);

  var CharFadeLeft =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharFadeLeft, _Char);

    function CharFadeLeft(instance) {
      var _this;

      _classCallCheck(this, CharFadeLeft);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharFadeLeft).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharFadeLeft, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            translateX: [20, 0],
            easing: 'easeOutQuart',
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateX: [0, -20],
            easing: 'easeInQuart',
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            translateX: [20, 0],
            opacity: [0, 1],
            easing: 'easeOutQuart',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharFadeLeft;
  }(Char);

  var CharFadeUp =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharFadeUp, _Char);

    function CharFadeUp(instance) {
      var _this;

      _classCallCheck(this, CharFadeUp);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharFadeUp).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharFadeUp, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            translateY: ['0.7em', 0],
            easing: 'easeOutExpo',
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateY: [0, '-0.4em'],
            easing: 'easeInExpo',
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            translateY: ['0.7em', 0],
            opacity: [0, 1],
            easing: 'easeOutExpo',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharFadeUp;
  }(Char);

  var CharFadeDown =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharFadeDown, _Char);

    function CharFadeDown(instance) {
      var _this;

      _classCallCheck(this, CharFadeDown);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharFadeDown).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharFadeDown, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            translateY: ['-0.7em', 0],
            easing: 'easeOutExpo',
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateY: [0, '0.4em'],
            easing: 'easeInExpo',
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            translateY: ['-0.7em', 0],
            opacity: [0, 1],
            easing: 'easeOutExpo',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharFadeDown;
  }(Char);

  var CharPush =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharPush, _Char);

    function CharPush(instance) {
      var _this;

      _classCallCheck(this, CharPush);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharPush).call(this, instance));
      styled.setStyle({
        overflow: 'hidden',
        'vertical-align': 'bottom'
      }, _this.element);

      _this.setupAnime();

      return _this;
    }

    _createClass(CharPush, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            translateY: ['0.7em', 0],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            translateY: [0, '-0.5em'],
            easing: 'easeInElastic',
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            translateY: ['0.7em', 0],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharPush;
  }(Char);

  var CharRotate =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharRotate, _Char);

    function CharRotate(instance) {
      var _this;

      _classCallCheck(this, CharRotate);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharRotate).call(this, instance));
      styled.setStyle({
        overflow: 'hidden',
        'vertical-align': 'bottom'
      }, _this.element);

      _this.chars.forEach(function (char) {
        styled.setStyle('transform-origin', '0 100%', char);
      });

      _this.setupAnime();

      return _this;
    }

    _createClass(CharRotate, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            rotateZ: [180, 0],
            opacity: [0, 1],
            easing: 'easeOutExpo',
            endDelay: 700
          }).add({
            rotateZ: [0, -45],
            opacity: [1, 0],
            easing: 'easeInExpo'
          });
        } else {
          anime({
            targets: this.chars,
            rotateZ: [180, 0],
            opacity: [0, 1],
            easing: 'easeOutExpo',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharRotate;
  }(Char);

  var CharBounceOut =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharBounceOut, _Char);

    function CharBounceOut(instance) {
      var _this;

      _classCallCheck(this, CharBounceOut);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharBounceOut).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharBounceOut, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            scale: [0, 1],
            easing: 'easeOutElastic',
            endDelay: 700
          }).add({
            scale: [1, 1.5],
            easing: 'easeInElastic',
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            scale: [0, 1],
            easing: 'easeOutElastic',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharBounceOut;
  }(Char);

  var CharFlip =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharFlip, _Char);

    function CharFlip(instance) {
      var _this;

      _classCallCheck(this, CharFlip);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharFlip).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharFlip, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            rotateY: [-90, 0],
            opacity: [0, 1],
            endDelay: 700
          }).add({
            rotateY: [0, 90],
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            rotateY: [-90, 0],
            opacity: [0, 1],
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharFlip;
  }(Char);

  var CharZoomIn =
  /*#__PURE__*/
  function (_Char) {
    _inherits(CharZoomIn, _Char);

    function CharZoomIn(instance) {
      var _this;

      _classCallCheck(this, CharZoomIn);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(CharZoomIn).call(this, instance));

      _this.setupAnime();

      return _this;
    }

    _createClass(CharZoomIn, [{
      key: "setupAnime",
      value: function setupAnime() {
        if (this.options.loop) {
          anime.timeline({
            targets: this.chars,
            loop: true,
            duration: this.options.duration,
            delay: function delay(el, i) {
              return 60 * i;
            }
          }).add({
            scale: [2, 1],
            opacity: [0, 1],
            easing: 'easeOutExpo',
            endDelay: 700
          }).add({
            scale: [1, 0],
            easing: 'easeInExpo',
            opacity: [1, 0]
          });
        } else {
          anime({
            targets: this.chars,
            scale: [2, 1],
            opacity: [0, 1],
            easing: 'easeOutExpo',
            duration: this.options.duration,
            loop: false,
            delay: function delay(el, i) {
              return 60 * i;
            }
          });
        }
      }
    }]);

    return CharZoomIn;
  }(Char);

  var effects = {
    fade: Fade,
    fadeDown: FadeDown,
    fadeUp: FadeUp,
    fadeLeft: FadeLeft,
    fadeRight: FadeRight,
    zoom: Zoom,
    bounce: Bounce,
    swing: Swing,
    typewrite: Typewrite,
    switchSlider: SwitchSlider,
    switchFade: SwitchFade,
    switchPush: SwitchPush,
    charFade: CharFade,
    charFadeLeft: CharFadeLeft,
    charFadeUp: CharFadeUp,
    charFadeDown: CharFadeDown,
    charPush: CharPush,
    charRotate: CharRotate,
    charBounceOut: CharBounceOut,
    charFlip: CharFlip,
    charZoomIn: CharZoomIn
  };

  var _dec, _dec2, _dec3, _dec4, _dec5, _class;
  var EFFECTS = {};
  var AnimateText = (_dec = decorator.styleable(classes), _dec2 = decorator.eventable(events), _dec3 = decorator.stateable(), _dec4 = decorator.optionable(defaults, true), _dec5 = decorator.register(namespace, {
    methods: methods,
    dependencies: dependencies
  }), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class =
  /*#__PURE__*/
  function (_Component) {
    _inherits(AnimateText, _Component);

    function AnimateText(element) {
      var _this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, AnimateText);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimateText).call(this, element));

      _this.setupOptions(options);

      _this.loop = _this.options.loop;
      _this.mode = _this.options.mode;
      _this.delay = _this.options.delay;
      _this.duration = _this.options.duration;

      _this.setupClasses();

      classes$1.addClass(_this.classes.NAMESPACE, _this.element);

      _this.setupStates();

      _this.initialize();

      return _this;
    }

    _createClass(AnimateText, [{
      key: "initialize",
      value: function initialize() {
        if (typeof EFFECTS[this.mode] !== 'undefined') {
          this.effect = new EFFECTS[this.mode](this);
        }

        this.bind();
        this.enter('initialized');
        this.trigger(events.READY);
      }
    }, {
      key: "splitWord",
      value: function splitWord(str) {
        var _this2 = this;

        var splitChar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var words = str.split(' ');
        words.forEach(function (word, index, array) {
          if (!splitChar) {
            var newWord = document.createElement('span');
            dom.text(word, newWord);
            classes$1.addClass(_this2.classes.WORD, newWord);
            dom.append(newWord, _this2.element);
          } else {
            var chars = word.split('');
            chars.forEach(function (char) {
              var newChar = document.createElement('span');
              dom.text(char, newChar);
              classes$1.addClass(_this2.classes.CHAR, newChar);
              dom.append(newChar, _this2.element);
            });
          }

          if (index < array.length - 1) {
            var space = document.createElement('span');
            classes$1.addClass(_this2.classes.SPACE, space);
            dom.text(' ', space);
            dom.append(space, _this2.element);
          }
        });
      }
    }, {
      key: "switchWord",
      value: function switchWord() {
        var _this3 = this;

        classes$1.addClass(this.classes.SWITCH, this.element);
        var content = document.createElement('span');
        classes$1.addClass(this.classes.WORD, content);
        dom.text(dom.text(this.element), content);
        dom.text('', this.element);
        dom.append(content, this.element);
        this.alt = is.isArray(this.options.alt) ? this.options.alt : [].push(this.options.alt);
        this.alt.forEach(function (alt) {
          var span = document.createElement('span');
          classes$1.addClass(_this3.classes.WORD, span);
          dom.text(alt, span);
          dom.append(span, _this3.element);
        });
      }
    }, {
      key: "bind",
      value: function bind() {
        events$1.bindEvent(this.eventName('click touch'), function () {
          return false;
        }, this.element);
      }
    }, {
      key: "unbind",
      value: function unbind() {
        events$1.removeEvent(this.eventName(), this.element);
      }
    }, {
      key: "enable",
      value: function enable() {
        if (this.is('disabled')) {
          this.leave('disabled');
        }

        this.trigger(events.ENABLE);
      }
    }, {
      key: "disable",
      value: function disable() {
        if (!this.is('disabled')) {
          this.enter('disabled');
        }

        this.trigger(events.DISABLE);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.is('initialized')) {
          this.unbind();
          this.leave('initialized');
        }

        this.trigger(events.DESTROY);

        _get(_getPrototypeOf(AnimateText.prototype), "destroy", this).call(this);
      }
    }], [{
      key: "registerEffect",
      value: function registerEffect(name, effect) {
        EFFECTS[name] = effect;
      }
    }]);

    return AnimateText;
  }(Component)) || _class) || _class) || _class) || _class) || _class);
  Object.keys(effects).forEach(function (effect) {
    AnimateText.registerEffect(effect, effects[effect]);
  });

  return AnimateText;

})));
